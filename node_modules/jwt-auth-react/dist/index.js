function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactRouterDom = require('react-router-dom');

var Auth = React__default.createContext(null);
var AuthContextProvider = Auth.Provider;
var AuthContext = Auth;

var TokenObject = /*#__PURE__*/function () {
  function TokenObject(tokenName) {
    this.tokenName = tokenName;
  }

  var _proto = TokenObject.prototype;

  _proto.isTokenExpire = function isTokenExpire() {
    if (this.isTokenExist()) {
      var _e = JSON.parse(localStorage[this.tokenName]).expiresAt;
      return _e < new Date();
    } else {
      return true;
    }
  };

  _proto.isTokenExist = function isTokenExist() {
    return localStorage[this.tokenName] !== undefined;
  };

  _proto.setToken = function setToken(value, expiresAt, state) {
    var json = {
      value: value,
      expiresAt: expiresAt,
      state: state
    };
    localStorage[this.tokenName] = JSON.stringify(json);
  };

  _proto.getToken = function getToken() {
    if (this.isTokenExist()) {
      if (!this.isTokenExpire()) {
        var _t = JSON.parse(localStorage[this.tokenName]);

        var token = _t.value;
        var expiresAt = _t.expiresAt;
        var state = _t.state;
        return {
          authToken: token,
          expireAt: expiresAt,
          state: state
        };
      } else {
        return {
          authToken: null,
          expireAt: null,
          state: null
        };
      }
    } else {
      return {
        authToken: null,
        expireAt: null,
        state: null
      };
    }
  };

  _proto.removeToken = function removeToken() {
    localStorage.removeItem(this.tokenName);
  };

  return TokenObject;
}();

var AuthProvider = function AuthProvider(_ref) {
  var cookieName = _ref.cookieName,
      children = _ref.children;
  var JwtToken = new TokenObject(cookieName);

  var _useState = React.useState(JwtToken.getToken()),
      authObject = _useState[0],
      setAuthObject = _useState[1];

  React.useEffect(function () {
    if (authObject.authToken === undefined || authObject.authToken === null || authObject.expireAt === null) {
      JwtToken.removeToken();
    } else {
      JwtToken.setToken(authObject.authToken, authObject.expireAt, authObject.state);
    }
  }, [authObject]);
  return /*#__PURE__*/React__default.createElement(AuthContextProvider, {
    value: {
      authObject: authObject,
      setAuthToken: setAuthObject
    }
  }, children);
};

AuthProvider.defaultProps = {
  cookieName: "_authUser"
};

var isAuth = function isAuth() {
  var value = React.useContext(AuthContext);

  if ((value === null || value === void 0 ? void 0 : value.authObject.authToken) && (value === null || value === void 0 ? void 0 : value.authObject.expireAt)) {
    if (value.authObject.expireAt < new Date()) {
      return {
        auth: true,
        authToken: value.authObject.authToken
      };
    } else {
      value.setAuthToken({
        authToken: null,
        expireAt: null,
        state: null
      });
      return {
        auth: false,
        authToken: null
      };
    }
  } else {
    return {
      auth: false,
      authToken: null
    };
  }
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var PrivateRoute = function PrivateRoute(_ref) {
  var Component = _ref.component,
      loginPath = _ref.loginPath,
      rest = _objectWithoutPropertiesLoose(_ref, ["component", "loginPath"]);

  var _authContext = React.useContext(AuthContext);

  var isAuth = function isAuth() {
    if ((_authContext === null || _authContext === void 0 ? void 0 : _authContext.authObject.authToken) && (_authContext === null || _authContext === void 0 ? void 0 : _authContext.authObject.expireAt)) {
      if (_authContext.authObject.expireAt < new Date()) {
        return {
          auth: true,
          authToken: _authContext.authObject.authToken
        };
      } else {
        _authContext.setAuthToken({
          authToken: null,
          expireAt: null,
          state: null
        });

        return {
          auth: false,
          authToken: null
        };
      }
    } else {
      return {
        auth: false,
        authToken: null
      };
    }
  };

  return /*#__PURE__*/React__default.createElement(reactRouterDom.Route, _extends({}, rest, {
    render: function render(props) {
      return isAuth().auth ? /*#__PURE__*/React__default.createElement(Component, props) : /*#__PURE__*/React__default.createElement(reactRouterDom.Redirect, {
        to: loginPath
      });
    }
  }));
};

var loginAuth = function loginAuth(token, expiresIn, state) {
  var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);

  try {
    var c = React.useContext(AuthContext);
    c.setAuthToken({
      authToken: token,
      expireAt: expTime,
      state: state
    });
    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
};
var logoutAuth = function logoutAuth() {
  try {
    var c = React.useContext(AuthContext);

    if (c === null || c === void 0 ? void 0 : c.authObject.authToken) {
      c.setAuthToken({
        authToken: null,
        expireAt: null,
        state: null
      });
      return true;
    } else {
      return false;
    }
  } catch (e) {
    console.error(e);
    return false;
  }
};

var authHeader = function authHeader() {
  var c = React.useContext(AuthContext);

  if (c.authObject.authToken) {
    return "Bearer " + c.authObject.authToken;
  } else {
    return null;
  }
};

exports.AuthProvider = AuthProvider;
exports.PrivateRoute = PrivateRoute;
exports.authHeader = authHeader;
exports.isAuth = isAuth;
exports.loginAuth = loginAuth;
exports.logoutAuth = logoutAuth;
//# sourceMappingURL=index.js.map
